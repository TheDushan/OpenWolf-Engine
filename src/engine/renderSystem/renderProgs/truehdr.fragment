uniform sampler2D u_TextureMap;
uniform sampler2D u_LevelsMap;

varying vec2		var_TexCoords;
varying vec2		var_Dimensions;
varying vec2		var_ScreenTex;

uniform vec2		u_Dimensions;

struct Fragment {
    vec3 color;
    float gamma;
};

vec3 tone_map(in Fragment fragment, float luma)
{
    fragment.color = exp(-1.0 / (2.72 * fragment.color + 0.15));
    fragment.color = pow(fragment.color, vec3(1.0 / (fragment.gamma * luma)));
    return fragment.color;
}

vec3 newHDR(in Fragment fragment) {
    float luma = dot(fragment.color, vec3(0.2126, 0.7152, 0.0722));
    return mix(fragment.color, tone_map(fragment, luma), 1.0 - luma);
}

float A = 0.15;
float B = 0.50;
float C = 0.10;
float D = 0.20;
float E = 0.02;
float F = 0.30;
float W = 11.2;

vec3 SexyTonemapMath(vec3 x)
{
     return ((x*(A*x+C*B)+D*E)/(x*(A*x+B)+D*F))-E/F;
}

vec4 SexyTonemap(vec3 inColor)
{
     vec3 texColor = inColor;
     texColor *= 2.0;  // Hardcoded Exposure Adjustment
     float ExposureBias = 2.0;
     vec3 curr = SexyTonemapMath(texColor * ExposureBias);
     vec3 whiteScale = vec3(1.0) / SexyTonemapMath( vec3(W) );
     vec3 color = curr * whiteScale;
     vec3 retColor = pow(color, vec3(1.0 / 2.2));
     return vec4(retColor, 1.0);
}

void main()
{
	vec4 color = texture2D(u_TextureMap, var_TexCoords);

	Fragment frag;
	frag.color = color.rgb;
	frag.gamma = 4.0;
	
	gl_FragColor = SexyTonemap(newHDR(frag));
}
