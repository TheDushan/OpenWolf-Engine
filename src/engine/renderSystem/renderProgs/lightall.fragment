uniform sampler2D u_DiffuseMap;
uniform vec4 u_Local1; // 0, 0, 0, 0
varying vec4 var_Local1; // 0, 0, 0, 0
varying vec4 var_Local2; // surfaceType, 0, 0, 0
varying vec2 var_Dimensions;

#if defined(USE_LIGHTMAP)
uniform sampler2D u_LightMap;
#endif

#if defined(USE_NORMALMAP)
uniform sampler2D u_NormalMap;
#endif

#if defined(USE_DELUXEMAP)
uniform sampler2D u_DeluxeMap;
#endif

#if defined(USE_SPECULARMAP)
uniform sampler2D u_SpecularMap;
#endif

#if defined(USE_SHADOWMAP)
uniform sampler2D u_ShadowMap;
#endif

#if defined(USE_CUBEMAP)
#define textureCubeLod textureLod
uniform samplerCube u_CubeMap;
#endif

#if defined(USE_NORMALMAP) || defined(USE_DELUXEMAP) || defined(USE_SPECULARMAP) || defined(USE_CUBEMAP)
// y = deluxe, w = cube
uniform vec4      u_EnableTextures; 
#endif

#if defined(USE_PRIMARY_LIGHT) || defined(USE_SHADOWMAP)
uniform vec3  u_PrimaryLightColor;
uniform vec3  u_PrimaryLightAmbient;
#endif

#if !defined(USE_LIGHT)
uniform vec4   u_NormalScale;
varying vec3   var_Normal;
varying vec3   var_ViewDir;
#endif

varying vec3 var_N;

#if defined(USE_LIGHT) && !defined(USE_FAST_LIGHT)
uniform vec4      u_NormalScale;
uniform vec4      u_SpecularScale;
#endif

#if defined(USE_LIGHT) && !defined(USE_FAST_LIGHT)
#if defined(USE_CUBEMAP)
uniform vec4      u_CubeMapInfo;
uniform sampler2D u_EnvBrdfMap;
#endif
#endif

uniform int       u_AlphaTest;

varying vec4      var_TexCoords;

varying vec4      var_Color;
#if (defined(USE_LIGHT) && !defined(USE_FAST_LIGHT))
varying vec4      var_ColorAmbient;
#endif

#if (defined(USE_LIGHT) && !defined(USE_FAST_LIGHT))
varying vec4   var_Normal;
varying vec4   var_Tangent;
varying vec4   var_Bitangent;
#endif

#if defined(USE_LIGHT) && !defined(USE_FAST_LIGHT)
varying vec4      var_LightDir;
#endif

//#if defined(USE_PRIMARY_LIGHT) || defined(USE_SHADOWMAP)
varying vec4      var_PrimaryLightDir;
//#endif

#define EPSILON 0.00000001

#if defined(USE_PARALLAXMAP)
  #if defined(USE_PARALLAXMAP)
	float SampleDepth(sampler2D normalMap, vec2 t)
	{
		#if defined(SWIZZLE_NORMALMAP)
			return 1.0 - texture2D(normalMap, t).r;
		#else
			return 1.0 - texture2D(normalMap, t).a;
		#endif
	}
  #endif //USE_PARALLAXMAP

float RayIntersectDisplaceMap(vec2 dp, vec2 ds, sampler2D normalMap)
{
	const int linearSearchSteps = 16;
	const int binarySearchSteps = 6;

	// current size of search window
	float size = 1.0 / float(linearSearchSteps);

	// current depth position
	float depth = 0.0;

	// best match found (starts with last position 1.0)
	float bestDepth = 1.0;

	// texture depth at best depth
	float texDepth = 0.0;

	float prevT = SampleDepth(normalMap, dp);
	float prevTexDepth = prevT;

	// search front to back for first point inside object
	for(int i = 0; i < linearSearchSteps - 1; ++i)
	{
		depth += size;
		
		float t = SampleDepth(normalMap, dp + ds * depth);
		
		if(bestDepth > 0.996)		// if no depth found yet
			if(depth >= t)
			{
				bestDepth = depth;	// store best depth
				texDepth = t;
				prevTexDepth = prevT;
			}
		prevT = t;
	}

	depth = bestDepth;

#if !defined (USE_RELIEFMAP)
	float div = 1.0 / (1.0 + (prevTexDepth - texDepth) * float(linearSearchSteps));
	bestDepth -= (depth - size - prevTexDepth) * div;
#else
	// recurse around first point (depth) for closest match
	for(int i = 0; i < binarySearchSteps; ++i)
	{
		size *= 0.5;

		float t = SampleDepth(normalMap, dp + ds * depth);
		
		if(depth >= t)
		{
			bestDepth = depth;
			depth -= 2.0 * size;
		}

		depth += size;
	}
#endif

	return bestDepth;
}

float LightRay(vec2 dp, vec2 ds, sampler2D normalMap)
{
	const int linearSearchSteps = 16;

	// current size of search window
	float size = 1.0 / float(linearSearchSteps);

	// current height from initial texel depth
	float height = 0.0;

	float startDepth = SampleDepth(normalMap, dp);

	// find a collision or escape
	for(int i = 0; i < linearSearchSteps - 1; ++i)
	{
		height += size;

		if (startDepth < height)
			return 1.0;

		float t = SampleDepth(normalMap, dp + ds * height);

		if (startDepth > t + height)
			return 0.0;
	}

	return 1.0;
}
#endif

vec3 CalcDiffuse(vec3 diffuseAlbedo, float NH, float EH, float roughness) 
{
	return diffuseAlbedo;
}

vec2 GetParallaxOffset(in vec2 texCoords, in vec3 E, in mat3 tangentToWorld )
{
#if defined(USE_PARALLAXMAP)
	vec3 offsetDir = normalize(E * tangentToWorld);
	offsetDir.xy *= -u_NormalScale.a / offsetDir.z;

	return offsetDir.xy * RayIntersectDisplaceMap(texCoords, offsetDir.xy, u_NormalMap);
#else
	return vec2(0.0);
#endif
}

vec3 CalcFresnel( in vec3 f0, in vec3 f90, in float LH )
{
	return f0 + (f90 - f0) * pow(1.0 - LH, 5.0);
}

float CalcGGX( in float NH, in float roughness )
{
	float alphaSq = roughness*roughness;
	float f = (NH * alphaSq - NH) * NH + 1.0;
	return alphaSq / (f * f);
}

float CalcVisibility( in float NL, in float NE, in float roughness )
{
	float alphaSq = roughness*roughness;

	float lambdaE = NL * sqrt((-NE * alphaSq + NE) * NE + alphaSq);
	float lambdaL = NE * sqrt((-NL * alphaSq + NL) * NL + alphaSq);

	return 0.5 / (lambdaE + lambdaL);
}

// http://www.frostbite.com/2014/11/moving-frostbite-to-pbr/
vec3 CalcSpecular( in vec3 specular, in float NH, in float NL, in float NE, in float LH, in float roughness)
{
	vec3  F = CalcFresnel(specular, vec3(1.0), LH);
	float D = CalcGGX(NH, roughness);
	float V = CalcVisibility(NL, NE, roughness);

	return D * F * V;
}

float CalcLightAttenuation(float point, float normDist)
{
	// zero light at 1.0, approximating q3 style
	// also don't attenuate directional light
	float attenuation = (0.5 * normDist - 1.5) * point + 1.0;

	// clamp attenuation
	#if defined(NO_LIGHT_CLAMP)
	attenuation = max(attenuation, 0.0);
	#else
	attenuation = clamp(attenuation, 0.0, 1.0);
	#endif

	return attenuation;
}

vec4 hitCube(vec3 ray, vec3 pos, vec3 invSize, float lod, samplerCube tex)
{
	// find any hits on cubemap faces facing the camera
	vec3 scale = (sign(ray) - pos) / ray;

	// find the nearest hit
	float minScale = min(min(scale.x, scale.y), scale.z);

	// if the nearest hit is behind the camera, ignore
	// should not be necessary as long as pos is inside the cube
	//if (minScale < 0.0)
		//return vec4(0.0);

	// calculate the hit position, that's our texture coordinates
	vec3 tc = pos + ray * minScale;

	// if the texture coordinates are outside the cube, ignore
	// necessary since we're not fading out outside the cube
	if (any(greaterThan(abs(tc), vec3(1.00001))))
		return vec4(0.0);

	// fade out when approaching the cubemap edges
	//vec3 fade3 = abs(pos);
	//float fade = max(max(fade3.x, fade3.y), fade3.z);
	//fade = clamp(1.0 - fade, 0.0, 1.0);

	//return vec4(textureCubeLod(tex, tc, lod).rgb * fade, fade);
	return vec4(textureCubeLod(tex, tc, lod).rgb, 1.0);
}

void main()
{
	vec3 viewDir, lightColor, ambientColor;
	vec3 L, N, E;
	float attenuation;
	vec4 specular = vec4(0.0);
	
	#if defined(USE_LIGHT) && !defined(USE_FAST_LIGHT)
		mat3 tangentToWorld = mat3(var_Tangent.xyz, var_Bitangent.xyz, var_Normal.xyz);
		viewDir = vec3(var_Normal.w, var_Tangent.w, var_Bitangent.w);
		E = normalize(viewDir);
	#endif
	
	lightColor = var_Color.rgb;
	
	#if defined(USE_LIGHTMAP)
		vec4 lightmapColor = texture2D(u_LightMap, var_TexCoords.zw);
	
		#if defined(RGBM_LIGHTMAP)
			lightmapColor.rgb *= lightmapColor.a;
		#endif
	
		#if defined(USE_PBR) && !defined(USE_FAST_LIGHT)
			lightmapColor.rgb *= lightmapColor.rgb;
		#endif
		
		lightColor *= lightmapColor.rgb;
	#endif

	vec2 texCoords = var_TexCoords.xy;

	#if defined(USE_PARALLAXMAP)
		vec3 offsetDir = E * tangentToWorld;
		offsetDir.xy *= -u_NormalScale.a / offsetDir.z;
		texCoords += GetParallaxOffset(texCoords, E, tangentToWorld);
		texCoords += offsetDir.xy * RayIntersectDisplaceMap(texCoords, offsetDir.xy, u_NormalMap);
	#endif

	vec4 diffuse = texture2D(u_DiffuseMap, texCoords);
	
	float alpha = diffuse.a * var_Color.a;
	if (u_AlphaTest == 1)
	{
		if (alpha == 0.0)
			discard;
	}
	else if (u_AlphaTest == 2)
	{
		if (alpha >= 0.5)
			discard;
	}
	else if (u_AlphaTest == 3)
	{
		if (alpha < 0.5)
			discard;
	}

	#if defined(USE_LIGHT) && !defined(USE_FAST_LIGHT)
		L = var_LightDir.xyz;
	
	#if defined(USE_DELUXEMAP)
		L += (texture2D(u_DeluxeMap, var_TexCoords.zw).xyz - vec3(0.5)) * u_EnableTextures.y;
	#endif
	
	float sqrLightDist = dot(L, L);
	L /= sqrt(sqrLightDist);
	
	#if defined(USE_LIGHT_VECTOR)
		attenuation  = CalcLightAttenuation(float(var_LightDir.w > 0.0), var_LightDir.w / sqrLightDist);
	#else
		attenuation  = 1.0;
	#endif

	#if defined(USE_NORMALMAP)
		vec4 norm = texture2D(u_NormalMap, texCoords);
		N = norm.xyz * 2.0 - 1.0;
		N.xy *= u_NormalScale.xy;
		N.z = sqrt(clamp((0.25 - N.x * N.x) - N.y * N.y, 0.0, 1.0));
		N = tangentToWorld * N;
	#endif

	N = normalize(N);
	L /= sqrt(sqrLightDist);
	
	#if defined(USE_SHADOWMAP) 
		vec2 shadowTex = gl_FragCoord.xy * r_FBufScale;
		float shadowValue = texture2D(u_ShadowMap, shadowTex).r;

		// surfaces not facing the light are always shadowed
		shadowValue *= clamp(dot(N, var_PrimaryLightDir.xyz), 0.0, 1.0);
		
		#if defined(SHADOWMAP_MODULATE)
		vec3 shadowColor = u_PrimaryLightAmbient * lightColor;

		lightColor *= shadowValue * (1.0 - u_PrimaryLightAmbient.r) + u_PrimaryLightAmbient.r;
		
		#if 0
		// Only shadow when the world light is parallel to the primary light
		shadowValue = 1.0 + (shadowValue - 1.0) * clamp(dot(L, var_PrimaryLightDir.xyz), 0.0, 1.0);
		#endif
		
		lightColor = mix(shadowColor, lightColor, shadowValue);
		#endif
	#endif

	#if defined(USE_PARALLAXMAP) && defined(USE_PARALLAXMAP_SHADOWS)
		offsetDir = L * tangentToWorld;
		offsetDir.xy *= u_NormalScale.a / offsetDir.z;
		lightColor *= LightRay(texCoords, offsetDir.xy, u_NormalMap);
	#endif
  
	#if !defined(USE_LIGHT_VECTOR)
		ambientColor = lightColor;
		float surfNL = clamp(dot(var_Normal.xyz, L), 0.0, 1.0);

		// reserve 25% ambient to avoid black areas on normalmaps
		lightColor *= 0.75;

		// Scale the incoming light to compensate for the baked-in light angle
		// attenuation.
		lightColor /= max(surfNL, 0.25);

		// Recover any unused light as ambient, in case attenuation is over 4x or
		// light is below the surface
		ambientColor = max(ambientColor - lightColor * surfNL, vec3(0.0));
	#else
		ambientColor = var_ColorAmbient.rgb;
	#endif
		
	#if defined(USE_SPECULARMAP)
		if (u_Local1.g != 0.0)
		{
			// Real specMap...
			specular = texture2D(u_SpecularMap, texCoords);
		}
	#endif

	if (u_Local1.b > 0.0)
	{
		if (u_SpecularScale.r + u_SpecularScale.g + u_SpecularScale.b + u_SpecularScale.a != 0.0) // Shader Specified...
			specular *= u_SpecularScale;
		else // Material Defaults...
		{
			specular *= u_Local1.b;
			
			if (u_Local1.b != 0.0 /* METALS */
				&& u_Local1.a != 30.0 /* ARMOR */ 
				&& u_Local1.a != 10.0 /* GLASS */ 
				&& u_Local1.a != 29.0 /* SHATTERGLASS */ 
				&& u_Local1.a != 18.0 /* BPGLASS */ 
				&& u_Local1.a != 31.0 /* COMPUTER */
				&& u_Local1.a != 15.0 /* ICE */
				&& u_Local1.a != 25.0 /* PLASTIC */
				&& u_Local1.a != 12.0 /* MARBLE */)
			{// Only if not metalic... Metals should remain nice and shiny...
				specular.rgb *= u_SpecularScale.rgb;
			}
		}
	}
	else
		specular *= u_SpecularScale;
   
	// diffuse is actually base color, and red of specular is metalness
	const vec3 DIELECTRIC_SPECULAR = vec3(0.04);
	const vec3 METAL_DIFFUSE       = vec3(0.0);

	float ao = specular.b;
	float metalness = specular.g;
	float roughness = max(specular.r, 0.04);
	specular.rgb = mix(DIELECTRIC_SPECULAR, diffuse.rgb, metalness);
	diffuse.rgb  = mix(diffuse.rgb, METAL_DIFFUSE, metalness);

	float NE = abs(dot(N, E)) + 1e-5;
	float NL = clamp(dot(N, L), 0.0, 1.0);

	vec3  Fd = diffuse.rgb;
	vec3  Fs = vec3(0.0);
	vec3  H;
	float LH, NH;
	
	vec3 reflectance = Fd + Fs;

	#if defined(USE_LIGHT_VECTOR) || defined(USE_DELUXEMAP) && defined(r_deluxeSpecular)
		H = normalize(L + E);
		LH = clamp(dot(L, H), 0.0, 1.0);
		NH = clamp(dot(N, H), 0.0, 1.0);

		Fs = CalcSpecular(specular.rgb, NH, NL, NE, LH, roughness);
	#endif
  
	gl_FragColor.rgb = lightColor * reflectance * (attenuation * NL);
	gl_FragColor.rgb += ambientColor * ao * diffuse.rgb;
	
	vec3 L2 = normalize(var_PrimaryLightDir.xyz);
	vec3 H2 = normalize(L2 + E);
	float NL2  = clamp(dot(N,  L2), 0.0, 1.0);
	float L2H2 = clamp(dot(L2, H2), 0.0, 1.0);
	float NH2  = clamp(dot(N,  H2), 0.0, 1.0);

	reflectance = diffuse.rgb;
	reflectance += CalcSpecular(specular.rgb, NH2, NL2, NE, L2H2, roughness);
	
	#if defined(USE_CUBEMAP)
		NE = clamp(dot(N, E), 0.0, 1.0);
		vec3 EnvBRDF = texture(u_EnvBrdfMap, vec2(roughness, NE)).rgb;

		vec3 R = reflect(E, N);

		// parallax corrected cubemap (cheaper trick)
		// from http://seblagarde.wordpress.com/2012/09/29/image-based-lighting-approaches-and-parallax-corrected-cubemap/
		vec3 parallax = u_CubeMapInfo.xyz + u_CubeMapInfo.w * viewDir;

	#if defined(USE_BOX_CUBEMAP_PARALLAX)
		vec3 cubeLightColor = hitCube(R * u_CubeMapInfo.w, parallax, u_CubeMapInfo.www, ROUGHNESS_MIPS * roughness, u_CubeMap).rgb * u_EnableTextures.w;
	#else
		vec3 cubeLightColor = textureCubeLod(u_CubeMap, R + parallax, ROUGHNESS_MIPS * roughness).rgb * u_EnableTextures.w;
	#endif	

		float horiz = 1.0;
		// from http://marmosetco.tumblr.com/post/81245981087
		#if defined(HORIZON_FADE)
			const float horizonFade = HORIZON_FADE;
			horiz = clamp( 1.0 + horizonFade * dot(-(R + parallax),var_Normal.xyz), 0.0, 1.0 );
			horiz *= horiz;
		#endif

		#if defined(USE_PBR)
			cubeLightColor *= cubeLightColor;
		#endif

		gl_FragColor.rgb += cubeLightColor * (specular.rgb * EnvBRDF.x + EnvBRDF.y) * horiz;
	#endif

	#if defined(USE_PRIMARY_LIGHT) || defined(SHADOWMAP_MODULATE)
		L2 = var_PrimaryLightDir.xyz;

		// enable when point lights are supported as primary lights
		//sqrLightDist = dot(L2, L2);
		//L2 /= sqrt(sqrLightDist);
		
		lightColor = u_PrimaryLightColor * var_Color.rgb;

		#if defined(USE_SHADOWMAP)
			lightColor *= shadowValue;
		#endif

		// enable when point lights are supported as primary lights
		//lightColor *= CalcLightAttenuation(float(var_PrimaryLightDir.w > 0.0), var_PrimaryLightDir.w / sqrLightDist);

		#if defined(USE_PARALLAXMAP) && defined(USE_PARALLAXMAP_SHADOWS)
			offsetDir = L2 * tangentToWorld;
			offsetDir.xy *= u_NormalScale.a / offsetDir.z;
			lightColor *= LightRay(texCoords, offsetDir.xy, u_NormalMap);
		#endif

			gl_FragColor.rgb += lightColor * reflectance * NL2;
		#endif
	  
		#if defined(USE_PBR)
			gl_FragColor.rgb = sqrt(gl_FragColor.rgb);
		#endif
	#else
		#if defined(USE_LIGHTMAP) 
			lightColor *= lightmapColor.rgb;
		#endif

		gl_FragColor.rgb = diffuse.rgb * lightColor;

		gl_FragColor = vec4 (diffuse.rgb * lightColor, diffuse.a * var_Color.a);
	#endif
	
	gl_FragColor.a = alpha;
}
